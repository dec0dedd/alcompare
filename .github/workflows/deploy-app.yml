name: Deploy app
run-name: Deploy HTML pages generated from Dash app
on:
  push:
  schedule:
    - cron: '30 0 * * *'
jobs:
  get_linear:
    name: Generate LinearRegression forecasts
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@main

      - name: Setup python
        uses: actions/setup-python@main
        with:
          python-version: '3.x'
          architecture: 'x64'

      - name: Install project and dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
          export
      
      - name: Generate predictions
        shell: bash
        run: |
          mkdir forecasts
          python models/model_linear.py

      - uses: actions/upload-artifact@main
        with:
          name: linear_forecast
          path: forecasts/LinearRegression.json

  get_lgbm:
      name: Generate LGBM forecasts
      runs-on: ubuntu-latest

      steps:
        - name: Checkout code
          uses: actions/checkout@main

        - name: Setup python
          uses: actions/setup-python@main
          with:
            python-version: '3.x'
            architecture: 'x64'

        - name: Install project and dependencies
          shell: bash
          run: |
            python -m pip install --upgrade pip
            python -m pip install -r requirements.txt
            export
        
        - name: Generate predictions
          shell: bash
          run: |
            mkdir forecasts
            python models/model_lgbm.py

        - uses: actions/upload-artifact@main
          with:
            name: lgbm_forecast
            path: forecasts/LGBM.json

  get_xgb:
      name: Generate XGB forecasts
      runs-on: ubuntu-latest

      steps:
        - name: Checkout code
          uses: actions/checkout@main

        - name: Setup python
          uses: actions/setup-python@main
          with:
            python-version: '3.x'
            architecture: 'x64'

        - name: Install project and dependencies
          shell: bash
          run: |
            python -m pip install --upgrade pip
            python -m pip install -r requirements.txt
            export
        
        - name: Generate predictions
          shell: bash
          run: |
            mkdir forecasts
            python models/model_xgb.py

        - uses: actions/upload-artifact@main
          with:
            name: xgb_forecast
            path: forecasts/XGB.json

  get_arima:
      name: Generate ARIMA forecasts
      runs-on: ubuntu-latest

      steps:
        - name: Checkout code
          uses: actions/checkout@main

        - name: Setup python
          uses: actions/setup-python@main
          with:
            python-version: '3.x'
            architecture: 'x64'

        - name: Install project and dependencies
          shell: bash
          run: |
            python -m pip install --upgrade pip
            python -m pip install -r requirements.txt
            export
        
        - name: Generate predictions
          shell: bash
          run: |
            mkdir forecasts
            python models/model_arima.py

        - uses: actions/upload-artifact@main
          with:
            name: arima_forecast
            path: forecasts/ARIMA.json

  get_prophet:
      name: Generate Prophet forecasts
      runs-on: ubuntu-latest

      steps:
        - name: Checkout code
          uses: actions/checkout@main

        - name: Setup python
          uses: actions/setup-python@main
          with:
            python-version: '3.x'
            architecture: 'x64'

        - name: Install project and dependencies
          shell: bash
          run: |
            python -m pip install --upgrade pip
            python -m pip install -r requirements.txt
            export
        
        - name: Generate predictions
          shell: bash
          run: |
            mkdir forecasts
            python models/model_prophet.py

        - uses: actions/upload-artifact@main
          with:
            name: prophet_forecast
            path: forecasts/prophet.json

  get_cat:
      name: Generate CatBoost forecasts
      runs-on: ubuntu-latest

      steps:
        - name: Checkout code
          uses: actions/checkout@main

        - name: Setup python
          uses: actions/setup-python@main
          with:
            python-version: '3.x'
            architecture: 'x64'

        - name: Install project and dependencies
          shell: bash
          run: |
            python -m pip install --upgrade pip
            python -m pip install -r requirements.txt
            export
        
        - name: Generate predictions
          shell: bash
          run: |
            mkdir forecasts
            python models/model_cat.py

        - uses: actions/upload-artifact@main
          with:
            name: cat_forecast
            path: forecasts/CAT.json

  run_app:
    name: Run app
    runs-on: ubuntu-latest
    needs: [get_linear, get_lgbm, get_xgb, get_arima, get_prophet, get_cat]

    steps:
      - name: Checkout code
        uses: actions/checkout@main

      - name: Setup Pages
        if: github.ref == 'refs/heads/main'
        uses: actions/configure-pages@main

      - name: Create forecasts/
        run: mkdir forecasts
      
      - name: Download forecasts
        uses: actions/download-artifact@main
        with:
          merge-multiple: true
      
      - name: Move to forecasts/
        run: |
          mv LinearRegression.json forecasts/LinearRegression.json
          mv LGBM.json forecasts/LGBM.json
          mv XGB.json forecasts/XGB.json
          mv ARIMA.json forecasts/ARIMA.json
          mv prophet.json forecasts/prophet.json
          mv CAT.json forecasts/CAT.json
      
      - name: Check files
        run: ls --all

      - name: Setup python
        uses: actions/setup-python@main
        with:
          python-version: '3.12'
          architecture: 'x64'

      - name: Install project and dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
          export

      - name: Run Makefile files
        run: |
          make clean_dirs
          make run_app

      - name: Upload Artifact
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-pages-artifact@main
        with:
          path: "./pages_files"

  deploy-pages:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: run_app
    
    permissions:
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@main